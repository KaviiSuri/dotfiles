# -*-mode:bash-*- vim:ft=bash

#
# ~/.bashrc: executed by bash for non-login shells.
# =============================================================================

# If not running interactively, don't do anything.
case $- in
    *i*) ;;
      *) return;;
esac


# General
# -----------------------------------------------------------------------------

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Case-insensitive globbing
shopt -s nocaseglob;

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# Do not autocomplete when accidentally pressing Tab on an empty line
shopt -s no_empty_cmd_completion;

# Do not overwrite files when redirecting using ">" (override this with ">|")
set -o noclobber;

# Prefer English and use UTF-8.
if command -v locale > /dev/null; then
    printf -v available_locales ' %s ' $(locale -a);
    for lang in en_US en_GB en; do
        for locale in "$lang".{UTF-8,utf8}; do
            if [[ "$available_locales" =~ " $locale " ]]; then
                export LC_ALL="$locale";
                export LANG="$lang";
                break 2;
            fi;
        done;
    done;
    unset available_locales lang locale;
fi;

# Make less more friendly for non-text input files, see lesspipe.
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# History
# -----------------------------------------------------------------------------

# Append to the history file, don't overwrite it.
shopt -s histappend;

# Keep invalid history operation entries.
shopt -s histreedit;

# Ignore commands that start with spaces, and ignore consecutive duplicates.
# This is a verbose way of saying `ignoreboth`.
export HISTCONTROL=ignorespace:ignoredups;

# Keep a reasonably long history.
export HISTSIZE=4096;

# Keep even more history lines inside the file, so we can still look up
# previous commands without needlessly cluttering the current shell's history.
export HISTFILESIZE=16384;

# Keep track of the time the commands were executed.
# The xterm colour escapes require special care when piping; e.g. "| less -R".
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S  ";

# Go up (CTRL+R) and down (CTRL+S) shell history
[[ $- == *i* ]] && stty -ixon


# Prompt
# -----------------------------------------------------------------------------

# Set variable identifying the chroot you work in (used in the prompt below).
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Set a fancy prompt (non-color, unless we know we "want" color).
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Uncomment for a colored prompt, if the terminal has the capability.
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '   else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
#    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

#    alias grep='grep --color=auto'
#    alias fgrep='fgrep --color=auto'
#    alias egrep='egrep --color=auto'
fi


# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -alF'
#alias la='ls -A'
#alias l='ls -CF'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# enable Powerline
# https://www.hanselman.com/blog/HowToMakeAPrettyPromptInWindowsTerminalWithPowerlineNerdFontsCascadiaCodeWSLAndOhmyposh.aspx
# GOPATH=$HOME/go
# function _update_ps1() {
#     PS1="$($GOPATH/bin/powerline-go -error $?)"
# }
# if [ "$TERM" != "linux" ] && [ -f "$GOPATH/bin/powerline-go" ]; then
#     PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
# fi


# Make prompt informative and colorful.
# format: [01 Jan, 14:00:00] user@laptop:~/.local/share/chezmoi
export PS1="\[\033[31m\][\D{%d %b}, \t] \[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ ";
export SUDO_PS1="\n[\t] \[\e[33;01;41m\]\u@\H\[\e[0m\]:\$PWD\n";

# Colors for dark Terminal theme
export CLICOLOR=1;
export LSCOLORS=GxFxCxDxBxegedabagaced;


# Bash-It Framework
# -----------------------------------------------------------------------------

# Hide default user from local prompt
export DEFAULT_USER="${USER}"

# Path to the bash it configuration
export BASH_IT="${HOME}/.bash-it"

# Lock and Load a custom theme file.
# Leave empty to disable theming.
# location /.bash_it/themes/
if [ "$color_prompt" = yes ]; then
    export BASH_IT_THEME='agnoster'
fi

# (Advanced): Change this to the name of your remote repo if you
# cloned bash-it with a remote other than origin such as `bash-it`.
# export BASH_IT_REMOTE='bash-it'

# Your place for hosting Git repos. You can use this for private repos.
# export GIT_HOSTING='git@git.domain.com'

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
#export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
#export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=false

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# (Advanced): Uncomment this to make Bash-it reload itself automatically
# after enabling or disabling aliases, plugins, and completions.
# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1

# Uncomment this to make Bash-it create alias reload.
# export BASH_IT_RELOAD_LEGACY=1

# Load Bash It (if installed)
[ -s "${BASH_IT}/bash_it.sh" ] && \. "${BASH_IT}/bash_it.sh"


# Development environments
# -----------------------------------------------------------------------------

# Dev Desktop
if [ -d "/Applications/DevDesktop" ]; then
    export PATH="$PATH:/Applications/DevDesktop/tools"
    export PATH="$PATH:/Applications/DevDesktop/drush_9"
fi

# Drush completions
# . ${HOME}/.drush/drush.bashrc

# Drush prompt customizations
# . ${HOME}/.drush/drush.prompt.sh

# Homebrew completions
if type brew &>/dev/null; then
    HOMEBREW_PREFIX="$(brew --prefix)"
    if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
        source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
    else
        for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
            [[ -r "$COMPLETION" ]] && source "$COMPLETION"
        done
    fi
fi

# Chezmoi completions
if command -v chezmoi > /dev/null; then
    eval "$(chezmoi completion bash)"
fi

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Node completions
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Python version management
if command -v pyenv > /dev/null; then
    eval "$(pyenv init -)"
fi

# Python completions
if command -v pipenv > /dev/null; then
    eval "$(pipenv --completion)"
fi

# Python global pip3 commands
if command -v pip3 > /dev/null; then
    gpip3(){
        PIP_REQUIRE_VIRTUALENV="0" pip3 "$@"
    }
fi

# Ruby version management
if command -v rbenv > /dev/null; then
    eval "$(rbenv init -)"
fi

# Ruby gems to PATH
if command -v ruby > /dev/null && command -v gem > /dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# Hosts
#if [[ -e ~/.ssh/known_hosts ]]; then
#  complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
#fi
_complete_hosts () {
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    host_list=`{
        for c in /etc/ssh_config /etc/ssh/ssh_config ${HOME}/.ssh/config
        do [ -r $c ] && sed -n -e 's/^Host[[:space:]]//p' -e 's/^[[:space:]]*HostName[[:space:]]//p' $c
        done
        for k in /etc/ssh_known_hosts /etc/ssh/ssh_known_hosts ${HOME}/.ssh/known_hosts
        do [ -r $k ] && egrep -v '^[#\[]' $k|cut -f 1 -d ' '|sed -e 's/[,:].*//g'
        done
        sed -n -e 's/^[0-9][0-9\.]*//p' /etc/hosts; }|tr ' ' '\n'|grep -v '*'`
    COMPREPLY=( $(compgen -W "${host_list}" -- $cur))
    return 0
}
complete -F _complete_hosts ssh
complete -F _complete_hosts sshs
complete -F _complete_hosts host
complete -F _complete_hosts telnet
complete -F _complete_hosts ping


# Continuous development
# -----------------------------------------------------------------------------

# Travis CI completions
[ -f ${HOME}/.travis/travis.sh ] && source ${HOME}/.travis/travis.sh


# Includes
# -----------------------------------------------------------------------------

# Load functions declarations from separate configuration file.
if [ -f $HOME/.bash_functions ]; then
    . $HOME/.bash_functions
fi

# Load alias definitions from separate configuration file.
if [ -f $HOME/.bash_aliases ]; then
    . $HOME/.bash_aliases
fi

# Load custom code from separate configuration file.
if [ -f $HOME/.bash_extras ]; then
    . $HOME/.bash_extras
fi



if [ -d "/usr/local/sbin" ]; then
    export PATH="/usr/local/sbin:$PATH"
fi

# Remove any duplicate paths
# export PATH="$(echo "$PATH" |/bin/awk 'BEGIN{RS=":";}
# {sub(sprintf("%c$",10),"");if(A[$0]){}else{A[$0]=1;
# printf(((NR==1)?"":":")$0)}}')";
